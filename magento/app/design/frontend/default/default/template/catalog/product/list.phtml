<?php
/**
 * Magento
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Academic Free License (AFL 3.0)
 * that is bundled with this package in the file LICENSE_AFL.txt.
 * It is also available through the world-wide-web at this URL:
 * http://opensource.org/licenses/afl-3.0.php
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@magentocommerce.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade Magento to newer
 * versions in the future. If you wish to customize Magento for your
 * needs please refer to http://www.magentocommerce.com for more information.
 *
 * @category    design
 * @package     base_default
 * @copyright   Copyright (c) 2012 Magento Inc. (http://www.magentocommerce.com)
 * @license     http://opensource.org/licenses/afl-3.0.php  Academic Free License (AFL 3.0)
 */
?>
<?php
/**
 * Product list template
 *
 * @see Mage_Catalog_Block_Product_List
 */
?>
<?php
$_productCollection = $this->getLoadedProductCollection();
$_helper = $this->helper('catalog/output');
?>
<?php if (!$_productCollection->count()): ?>
    <p class="note-msg"><?php echo $this->__('There are no products matching the selection.') ?></p>
<?php else: ?>
    <div class="category-products">
        <?php echo $this->getToolbarHtml() ?>
        <?php if ($this->getMode() != 'grid'): ?>
            <?php // List Mode ?>
            <?php 
                // check to see if part_type filter includes turbo
                $part_type_params = Mage::app()->getRequest()->getParam("part_type"); 
                $part_type_params_array = explode(',', $part_type_params);

                // check to see if array has attribute_id for turbo
                $loaded_products_has_part_type_turbo = False;
                if (count($_productCollection->getItemsByColumnValue('part_type','6610')) > 0) {
                    $loaded_products_has_part_type_turbo = True;
                }
            ?>
            <table class="data-table" id="products-list">
                <tr>
                    <th>OE Part #</th>
                    <th>TI Part #</th>
                    <th>Part Type</th>
                    <th>Name</th>
                    <th>Manufacturer</th>
                    <?php if ($loaded_products_has_part_type_turbo): ?><th>CHRA</th><?php endif; ?>
                    <?php if ($loaded_products_has_part_type_turbo): ?><th>TI CHRA</th><?php endif; ?>
                    <th class="number-right-align">Price</th>
                </tr>
                <?php $_collectionSize = $_productCollection->count() ?>
                <?php $_columnCount = $this->getColumnCount(); ?>
                <?php

                $tiPartSkus = array();
                $bomItemSkus = array();
                $bomItemTiPartSkus = array();
                $tiPartSkusCollection = array();
                $bomItemSkusCollection = array();
                $bomItemTiPartSkusCollection = array();
                
                // get skus to use for collection. Faster than querying database for each product during main foreach loop
                foreach ($_productCollection as $_product):

                    // get the sku of each bom item only if primary part is a Turbo
                    if ($_product->isTurbo()) {
                        $billOfMaterials = json_decode($_product->getBillOfMaterials(), true);
                            
                            foreach ($billOfMaterials as $idx => $bomItem) {
                                // get sku of BOM item
                                $bomItemSkus[] = $bomItem['sku'];

                                // get skus of TI interchange parts of BOM item
                                $bomItemTiPartSkus = array_merge($bomItemTiPartSkus, $bomItem['ti_part_sku']);
                            }
                    }

                    //create array of all TI skus in collection
                    $productTiPartSkuExplode = explode(",", $_product->getTiPartSku());
                    if ($productTiPartSkuExplode[0] != "") {
                        $tiPartSkus = array_merge($tiPartSkus, $productTiPartSkuExplode);
                    }

                endforeach;

                // get collection of BOM item products
                if ($bomItemSkus) {
                    $bomItemSkusCollection = Mage::getModel('catalog/product')->getCollection()
                        ->addAttributeToSelect('part_number')
                        ->addAttributeToSelect('price')
                        ->addFieldToFilter('sku', $bomItemSkus);
                }

                // get collection of BOM item TI Part interchange products
                if ($bomItemTiPartSkus) {
                    $bomItemTiPartSkusCollection = Mage::getModel('catalog/product')->getCollection()
                        ->addAttributeToSelect('part_number')
                        ->addAttributeToSelect('price')
                        ->addFieldToFilter('sku', $bomItemTiPartSkus);
                }
                
                // get collection of TI sku products
                if ($tiPartSkus) {
                    $tiPartSkusCollection = Mage::getModel('catalog/product')->getCollection()
                        ->addAttributeToSelect('part_number')
                        ->addAttributeToSelect('price')
                        ->addFieldToFilter('sku', $tiPartSkus);
                }
                
                ?>
                <?php $i = 0;
                foreach ($_productCollection as $_product): ?>
                    <?php // if is turbo then extract chra from bom
                    $firstChraProduct = null;
                    $firstChraTiProduct = null;
                    if ($loaded_products_has_part_type_turbo){
                        $cartridgeArray = array();
                        $cartridgeTiArray = array();

                        // check to see if product is a turbo
                        if ($_product->isTurbo()){

                            // Get the Bill of Materials
                            $billOfMaterials = json_decode($_product->getBillOfMaterials(), true);

                            foreach ($billOfMaterials as $idx => $bomItem) {
                                $bomItemProduct = $bomItemSkusCollection->getItemByColumnValue('sku',$bomItem['sku']);

                                // check to see if product is a cartridge
                                if ($bomItemProduct->isCartridge()) {

                                    // save first chra for pricing
                                    if ($firstChraProduct == null) {
                                        $firstChraProduct = $bomItemProduct;
                                    }

                                    $cartridgeArray[] = '<a href="' . $bomItemProduct->getProductUrl() . '">' . $bomItemProduct->getPartNumber() . '</a>';

                                    // get data for interchangeable chra TI part if exists.  There can be multiple TI parts for a chra
                                    foreach ($bomItem['ti_part_sku'] as $chraTiPartSku) {
                                        $chraTiProduct = $bomItemTiPartSkusCollection->getItemByColumnValue('sku',$chraTiPartSku);

                                        // save first TI chra for pricing
                                        if ($firstChraTiProduct == null) {
                                            $firstChraTiProduct = $chraTiProduct;
                                        }

                                        $cartridgeTiArray[] = '<a href="' . $chraTiProduct->getProductUrl() . '">' . $chraTiProduct->getPartNumber() . '</a>';
                                    }

                                }
                            }
                        }
                    }
                    ?>
                    <?php if ($i++ % $_columnCount == 0): ?>
                    <?php endif ?>
                    <tr>
                        <td><a href="<?php echo $_product->getProductUrl() ?>"><?php echo $_product->getPartNumber() ?></a></td>
                        <td><?php $tiPartSkus = explode(",", $_product->getTiPartSku()) ?>
                            <?php $firstTiProduct = null; ?>
                            <?php foreach ($tiPartSkus as $idx => $tiPartSku): ?>
                                <?php

                                // Only if there's a sku
                                if ($tiPartSku == '') {
                                    continue;
                                }

                                $tiPart = $tiPartSkusCollection->getItemByColumnValue('sku',$tiPartSku);

                                if ($firstTiProduct == null) {
                                    $firstTiProduct = $tiPart;
                                }

                                if ($idx > 0) {
                                    echo ",";
                                }?>

                                <a href="<?php echo $tiPart->getProductUrl() ?>"><?php echo $tiPart->getPartNumber(); ?></a>
                            <?php endforeach ?>
                        </td>
                        <td><?php echo $_product->getAttributeText('part_type') ?></td>
                        <td><a href="<?php echo $_product->getProductUrl() ?>"
                               title="<?php echo $this->stripTags($_product->getName(), null, true) ?>"><?php echo $_product->getName() ?></a>
                        </td>
                        <td><?php echo $_product->getAttributeText('manufacturer') ?></td>
                        <?php if ($loaded_products_has_part_type_turbo): ?><td><?php echo implode(", ", $cartridgeArray) ?></td><?php endif; ?>
                        <?php if ($loaded_products_has_part_type_turbo): ?><td><?php echo implode(", ", $cartridgeTiArray) ?></td><?php endif; ?>
                        <td>
                            <?php if (Mage::getSingleton('customer/session')->isLoggedIn()): ?>
                                <?php
                                $productPrice = "";

                                // get main product price
                                if ($_product->isTurboInternational()) {
                                    $productPrice = Mage::helper('core')->currency($_product->getFinalPrice());
                                } elseif ($firstTiProduct) {
                                    $productPrice = Mage::helper('core')->currency($firstTiProduct->getFinalPrice());
                                }

                                // determine what price to show based on if part type is turbocharger
                                if ($_product->isTurbo()) {
                                    // show both BOM chra price and turbo price if part type is turbocharger
                                    $chraPrice = "";

                                    // display main product price if exists
                                    if (strlen($productPrice) > 0) {
                                        echo "<div class='products-list-price'><span class='price-label'>Turbo: </span>";
                                        echo $productPrice;
                                        echo "</div>";
                                    }

                                    // chra price
                                    if ($firstChraProduct && $firstChraProduct->isTurboInternational()) {
                                        $chraPrice = Mage::helper('core')->currency($firstChraProduct->getFinalPrice());
                                    } elseif ($firstChraTiProduct) {
                                        $chraPrice = Mage::helper('core')->currency($firstChraTiProduct->getFinalPrice());
                                    }

                                    // display chra price if exists
                                    if (strlen($chraPrice) > 0) {
                                        echo "<div class='products-list-price'><span class='price-label'>Chra: </span>";
                                        echo $chraPrice;
                                        #echo $this->getPriceHtml($firstChraTiProduct, true);
                                        echo "</div>";
                                    }
                                } else {
                                    // price for non turbocharger parts
                                    echo "<div class='products-list-price'>";
                                    echo $productPrice;
                                    echo "</div>";
                                }?>
                            <?php else: ?>
                              <div class="number-right-align"><a href="<?php echo $this->getUrl('customer/account/login'); ?>">Login for price</a></div>
                            <?php endif; ?>
                        </td>
                    </tr>
                    <?php if ($i % $_columnCount == 0 || $i == $_collectionSize): ?>
                    <?php endif ?>
                <?php endforeach ?>
            </table>
            <script type="text/javascript">decorateTable('products-list', 'none-recursive')</script>
        <?php else: ?>
            <?php // Grid Mode ?>
            <?php $_collectionSize = $_productCollection->count() ?>
            <?php $_columnCount = $this->getColumnCount(); ?>
            <?php $i = 0;
            foreach ($_productCollection as $_product): ?>
                <?php if ($i++ % $_columnCount == 0): ?>
                    <ul class="products-grid">
                <?php endif ?>
                <li class="item<?php if (($i - 1) % $_columnCount == 0): ?> first<?php elseif ($i % $_columnCount == 0): ?> last<?php endif; ?>">
                    <a href="<?php echo $_product->getProductUrl() ?>"
                       title="<?php echo $this->stripTags($this->getImageLabel($_product, 'small_image'), null, true) ?>"
                       class="product-image"><img
                            src="<?php echo $this->helper('catalog/image')->init($_product, 'small_image')->resize(135); ?>"
                            width="135" height="135"
                            alt="<?php echo $this->stripTags($this->getImageLabel($_product, 'small_image'), null, true) ?>"/></a>

                    <h2 class="product-name"><a href="<?php echo $_product->getProductUrl() ?>"
                                                title="<?php echo $this->stripTags($_product->getName(), null, true) ?>"><?php echo $_helper->productAttribute($_product, $_product->getName(), 'name') ?></a>
                    </h2>

                    <dl class="part-type-oem">
                        <dt>Part Type:</dt>
                        <dd><?php echo $_product->getAttributeText('part_type') ?></dd>
                        <?php if ($_product->getPartNumber()): ?>
                            <dt>OE Part #:</dt>
                            <dd><?php echo $_product->getPartNumber() ?></dd>
                        <?php endif; ?>
                    </dl>
                    <?php if ($_product->getRatingSummary()): ?>
                        <?php echo $this->getReviewsSummaryHtml($_product, 'short') ?>
                    <?php endif; ?>
                    <?php echo $this->getPriceHtml($_product, true) ?>
                    <div class="actions">
<!--                        --><?php //if ($_product->isSaleable()): ?>
<!--                            <button type="button" title="--><?php //echo $this->__('Add to Cart') ?><!--" class="button btn-cart"-->
<!--                                    onclick="setLocation('--><?php //echo $this->getAddToCartUrl($_product) ?><!--')">-->
<!--                                <span><span>--><?php //echo $this->__('Add to Cart') ?><!--</span></span></button>-->
<!--                        --><?php //else: ?>
<!--                            <p class="availability out-of-stock"><span>--><?php //echo $this->__('Out of stock') ?><!--</span></p>-->
<!--                        --><?php //endif; ?>
                        <?php if (Mage::getSingleton('customer/session')->isLoggedIn()) : ?>
                            <ul class="add-to-links">
                                <?php if ($this->helper('wishlist')->isAllow()) : ?>
                                    <li><a href="<?php echo $this->helper('wishlist')->getAddUrl($_product) ?>"
                                            class="link-wishlist"><?php echo $this->__('Add to Wishlist') ?></a></li>
                                <?php endif; ?>
                                <?php if ($_compareUrl = $this->getAddToCompareUrl($_product)): ?>
                                    <li><span class="separator">|</span> <a href="<?php echo $_compareUrl ?>"
                                            class="link-compare"><?php echo $this->__('Add to Compare') ?></a>
                                    </li>
                                <?php endif; ?>
                            </ul>
                        <?php endif; ?>
                    </div>
                </li>
                <?php if ($i % $_columnCount == 0 || $i == $_collectionSize): ?>
                    </ul>
                <?php endif ?>
            <?php endforeach ?>
        <?php endif; ?>
        <script type="text/javascript">decorateGeneric($$('ul.products-grid'), ['odd', 'even', 'first', 'last'])</script>
        <div class="toolbar-bottom">
            <?php echo $this->getToolbarHtml() ?>
        </div>
    </div>
<?php endif; ?>

