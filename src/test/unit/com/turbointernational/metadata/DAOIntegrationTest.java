package com.turbointernational.metadata;

import org.junit.Assert;
import org.junit.Test;


import com.turbointernational.metadata.yourProjectName.factories.ti.*;
import com.turbointernational.metadata.yourProjectName.model.obj.ti.*;
import com.turbointernational.metadata.yourProjectName.services.data.DataLayerTi;
import com.turbointernational.metadata.yourProjectName.services.data.DataLayerTiImpl;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.junit.runner.RunWith;
import org.springframework.transaction.annotation.Transactional;

/** Hibernate tester.
* @author autogenerated
*/
@SuppressWarnings("cast")
@ContextConfiguration(locations = { "/applicationContext.xml" } )
@RunWith(SpringJUnit4ClassRunner.class)
public class DAOIntegrationTest {
		

	/**
	 * Clears the database.
	 */
	@Test
	@Transactional
	public void testPreCleanDBFirstPass() {
		// We'll ignore any exceptions in this pass to give time for the custom exec to execute too 
		// (+ clear out any DB loops)
	
		try{HibernateTiDaoFactory.getStandardJournalBearingDao().getQuery("delete from StandardJournalBearing").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateTiDaoFactory.getStandardBearingSpacerDao().getQuery("delete from StandardBearingSpacer").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateTiDaoFactory.getPartTurboTypeDao().getQuery("delete from PartTurboType").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateTiDaoFactory.getNozzleRingDao().getQuery("delete from NozzleRing").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateTiDaoFactory.getKitDao().getQuery("delete from Kit").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateTiDaoFactory.getJournalBearingDao().getQuery("delete from JournalBearing").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateTiDaoFactory.getInterchangeItemDao().getQuery("delete from InterchangeItem").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateTiDaoFactory.getHeatshieldDao().getQuery("delete from Heatshield").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateTiDaoFactory.getGasketDao().getQuery("delete from Gasket").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateTiDaoFactory.getCompressorWheelDao().getQuery("delete from CompressorWheel").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateTiDaoFactory.getCartridgeDao().getQuery("delete from Cartridge").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateTiDaoFactory.getBomAltItemDao().getQuery("delete from BomAltItem").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateTiDaoFactory.getBomDao().getQuery("delete from Bom").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateTiDaoFactory.getBearingSpacerDao().getQuery("delete from BearingSpacer").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateTiDaoFactory.getBearingHousingDao().getQuery("delete from BearingHousing").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateTiDaoFactory.getBackplateDao().getQuery("delete from Backplate").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateTiDaoFactory.getTurboTypeDao().getQuery("delete from TurboType").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateTiDaoFactory.getTurboDao().getQuery("delete from Turbo").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateTiDaoFactory.getTurbineWheelDao().getQuery("delete from TurbineWheel").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateTiDaoFactory.getPistonRingDao().getQuery("delete from PistonRing").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateTiDaoFactory.getPartDao().getQuery("delete from Part").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateTiDaoFactory.getManfrDao().getQuery("delete from Manfr").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateTiDaoFactory.getBomHierarchyDao().getQuery("delete from BomHierarchy").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateTiDaoFactory.getTurboModelDao().getQuery("delete from TurboModel").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateTiDaoFactory.getSealTypeDao().getQuery("delete from SealType").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateTiDaoFactory.getPartTypeDao().getQuery("delete from PartType").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateTiDaoFactory.getPartAttributeDao().getQuery("delete from PartAttribute").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateTiDaoFactory.getManfrTypeDao().getQuery("delete from ManfrType").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateTiDaoFactory.getKitTypeDao().getQuery("delete from KitType").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateTiDaoFactory.getInterchangeHeaderDao().getQuery("delete from InterchangeHeader").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateTiDaoFactory.getIInterchangeLogDao().getQuery("delete from IInterchangeLog").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateTiDaoFactory.getGasketTypeDao().getQuery("delete from GasketType").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateTiDaoFactory.getCoolTypeDao().getQuery("delete from CoolType").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateTiDaoFactory.getBomAltHeaderDao().getQuery("delete from BomAltHeader").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateTiDaoFactory.getAttributeTypeDao().getQuery("delete from AttributeType").executeUpdate(); } catch (Exception e) { /* do nothing */ }


		
	}
	/**
	 * Clears the database.
	 */
	@Test
	@Transactional
	public void testPreCleanDBFinalPass() {
	
		HibernateTiDaoFactory.getStandardJournalBearingDao().getQuery("delete from StandardJournalBearing").executeUpdate();
		HibernateTiDaoFactory.getStandardBearingSpacerDao().getQuery("delete from StandardBearingSpacer").executeUpdate();
		HibernateTiDaoFactory.getPartTurboTypeDao().getQuery("delete from PartTurboType").executeUpdate();
		HibernateTiDaoFactory.getNozzleRingDao().getQuery("delete from NozzleRing").executeUpdate();
		HibernateTiDaoFactory.getKitDao().getQuery("delete from Kit").executeUpdate();
		HibernateTiDaoFactory.getJournalBearingDao().getQuery("delete from JournalBearing").executeUpdate();
		HibernateTiDaoFactory.getInterchangeItemDao().getQuery("delete from InterchangeItem").executeUpdate();
		HibernateTiDaoFactory.getHeatshieldDao().getQuery("delete from Heatshield").executeUpdate();
		HibernateTiDaoFactory.getGasketDao().getQuery("delete from Gasket").executeUpdate();
		HibernateTiDaoFactory.getCompressorWheelDao().getQuery("delete from CompressorWheel").executeUpdate();
		HibernateTiDaoFactory.getCartridgeDao().getQuery("delete from Cartridge").executeUpdate();
		HibernateTiDaoFactory.getBomAltItemDao().getQuery("delete from BomAltItem").executeUpdate();
		HibernateTiDaoFactory.getBomDao().getQuery("delete from Bom").executeUpdate();
		HibernateTiDaoFactory.getBearingSpacerDao().getQuery("delete from BearingSpacer").executeUpdate();
		HibernateTiDaoFactory.getBearingHousingDao().getQuery("delete from BearingHousing").executeUpdate();
		HibernateTiDaoFactory.getBackplateDao().getQuery("delete from Backplate").executeUpdate();
		HibernateTiDaoFactory.getTurboTypeDao().getQuery("delete from TurboType").executeUpdate();
		HibernateTiDaoFactory.getTurboDao().getQuery("delete from Turbo").executeUpdate();
		HibernateTiDaoFactory.getTurbineWheelDao().getQuery("delete from TurbineWheel").executeUpdate();
		HibernateTiDaoFactory.getPistonRingDao().getQuery("delete from PistonRing").executeUpdate();
		HibernateTiDaoFactory.getPartDao().getQuery("delete from Part").executeUpdate();
		HibernateTiDaoFactory.getManfrDao().getQuery("delete from Manfr").executeUpdate();
		HibernateTiDaoFactory.getBomHierarchyDao().getQuery("delete from BomHierarchy").executeUpdate();
		HibernateTiDaoFactory.getTurboModelDao().getQuery("delete from TurboModel").executeUpdate();
		HibernateTiDaoFactory.getSealTypeDao().getQuery("delete from SealType").executeUpdate();
		HibernateTiDaoFactory.getPartTypeDao().getQuery("delete from PartType").executeUpdate();
		HibernateTiDaoFactory.getPartAttributeDao().getQuery("delete from PartAttribute").executeUpdate();
		HibernateTiDaoFactory.getManfrTypeDao().getQuery("delete from ManfrType").executeUpdate();
		HibernateTiDaoFactory.getKitTypeDao().getQuery("delete from KitType").executeUpdate();
		HibernateTiDaoFactory.getInterchangeHeaderDao().getQuery("delete from InterchangeHeader").executeUpdate();
		HibernateTiDaoFactory.getIInterchangeLogDao().getQuery("delete from IInterchangeLog").executeUpdate();
		HibernateTiDaoFactory.getGasketTypeDao().getQuery("delete from GasketType").executeUpdate();
		HibernateTiDaoFactory.getCoolTypeDao().getQuery("delete from CoolType").executeUpdate();
		HibernateTiDaoFactory.getBomAltHeaderDao().getQuery("delete from BomAltHeader").executeUpdate();
		HibernateTiDaoFactory.getAttributeTypeDao().getQuery("delete from AttributeType").executeUpdate();


		
	}

	
	/**
	 * Hibernate test case for table: ti.attribute_type.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testAttributeType() throws CloneNotSupportedException {

	 	DataLayerTi dataLayerTi = DataLayerTiImpl.getInstance();
		AttributeType attributeType = TiDataPoolFactory.getAttributeType();
		dataLayerTi.saveOrUpdate(attributeType);

		Integer attributeTypeId = attributeType.getId();
		AttributeType copy = attributeType.clone();
		dataLayerTi.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerTi.evict(attributeType); 		 

		attributeType = dataLayerTi.getAttributeType(attributeTypeId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getName(), attributeType.getName());
		// tests for coverage completeness
		Assert.assertFalse(attributeType.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(attributeType.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}
	/**
	 * Hibernate test case for table: ti.backplate.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testBackplate() throws CloneNotSupportedException {

	 	DataLayerTi dataLayerTi = DataLayerTiImpl.getInstance();
		Backplate backplate = TiDataPoolFactory.getBackplate();
		dataLayerTi.saveOrUpdate(backplate);

		Integer backplateId = backplate.getId();
		Backplate copy = backplate.clone();
		dataLayerTi.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerTi.evict(backplate); 		 

		backplate = dataLayerTi.getBackplate(backplateId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getCompressorHousingDiameter(), backplate.getCompressorHousingDiameter());
		Assert.assertEquals(copy.getCompressorWheelDiameter(), backplate.getCompressorWheelDiameter());
		Assert.assertEquals(copy.getDescription(), backplate.getDescription());
		Assert.assertEquals(copy.getImportPk(), backplate.getImportPk());
		Assert.assertEquals(copy.getInactive(), backplate.getInactive());
		Assert.assertEquals(copy.getManfr().getId(), backplate.getManfr().getId());
		Assert.assertEquals(copy.getManfrPartNum(), backplate.getManfrPartNum());
		Assert.assertEquals(copy.getName(), backplate.getName());
		Assert.assertEquals(copy.getNotes(), backplate.getNotes());
		Assert.assertEquals(copy.getOverallDiameter(), backplate.getOverallDiameter());
		Assert.assertEquals(copy.getOverallHeight(), backplate.getOverallHeight());
		Assert.assertEquals(copy.getPartType().getId(), backplate.getPartType().getId());
		Assert.assertEquals(copy.getPistonRingDiameter(), backplate.getPistonRingDiameter());
		Assert.assertEquals(copy.getSealType(), backplate.getSealType());
		Assert.assertEquals(copy.getSealTypeId(), backplate.getSealTypeId());
		Assert.assertEquals(copy.getSecondaryDiameter(), backplate.getSecondaryDiameter());
		Assert.assertEquals(copy.getStyleCompressorWheel(), backplate.getStyleCompressorWheel());
		Assert.assertEquals(copy.getTemp1Char(), backplate.getTemp1Char());
		Assert.assertEquals(copy.getTemp1Dec(), backplate.getTemp1Dec());
		Assert.assertEquals(copy.getTemp2Char(), backplate.getTemp2Char());
		Assert.assertEquals(copy.getTemp2Dec(), backplate.getTemp2Dec());
		Assert.assertEquals(copy.getTemp2Int(), backplate.getTemp2Int());
		Assert.assertEquals(copy.getTemp3Char(), backplate.getTemp3Char());
		Assert.assertEquals(copy.getTemp3Dec(), backplate.getTemp3Dec());
		Assert.assertEquals(copy.getTemp3Int(), backplate.getTemp3Int());
		Assert.assertEquals(copy.getTemp4Char(), backplate.getTemp4Char());
		Assert.assertEquals(copy.getTemp4Dec(), backplate.getTemp4Dec());
		Assert.assertEquals(copy.getTemp5Char(), backplate.getTemp5Char());
		Assert.assertEquals(copy.getTemp5Dec(), backplate.getTemp5Dec());
		Assert.assertEquals(copy.getTemp6Char(), backplate.getTemp6Char());
		Assert.assertEquals(copy.getTemp6Dec(), backplate.getTemp6Dec());
		Assert.assertEquals(copy.getTemp7Char(), backplate.getTemp7Char());
		Assert.assertEquals(copy.getTemp8Char(), backplate.getTemp8Char());
		// tests for coverage completeness
		Assert.assertFalse(backplate.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(backplate.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}
	/**
	 * Hibernate test case for table: ti.bearing_housing.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testBearingHousing() throws CloneNotSupportedException {

	 	DataLayerTi dataLayerTi = DataLayerTiImpl.getInstance();
		BearingHousing bearingHousing = TiDataPoolFactory.getBearingHousing();
		dataLayerTi.saveOrUpdate(bearingHousing);

		Integer bearingHousingId = bearingHousing.getId();
		BearingHousing copy = bearingHousing.clone();
		dataLayerTi.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerTi.evict(bearingHousing); 		 

		bearingHousing = dataLayerTi.getBearingHousing(bearingHousingId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getBearingType(), bearingHousing.getBearingType());
		Assert.assertEquals(copy.getCoolTypeId(), bearingHousing.getCoolTypeId());
		Assert.assertEquals(copy.getDescription(), bearingHousing.getDescription());
		Assert.assertEquals(copy.getDesignFeatures(), bearingHousing.getDesignFeatures());
		Assert.assertEquals(copy.getImportPk(), bearingHousing.getImportPk());
		Assert.assertEquals(copy.getInactive(), bearingHousing.getInactive());
		Assert.assertEquals(copy.getManfr().getId(), bearingHousing.getManfr().getId());
		Assert.assertEquals(copy.getManfrPartNum(), bearingHousing.getManfrPartNum());
		Assert.assertEquals(copy.getName(), bearingHousing.getName());
		Assert.assertEquals(copy.getOil(), bearingHousing.getOil());
		Assert.assertEquals(copy.getOilInlet(), bearingHousing.getOilInlet());
		Assert.assertEquals(copy.getOilOutlet(), bearingHousing.getOilOutlet());
		Assert.assertEquals(copy.getOutletFlangeHoles(), bearingHousing.getOutletFlangeHoles());
		Assert.assertEquals(copy.getPartType().getId(), bearingHousing.getPartType().getId());
		Assert.assertEquals(copy.getTemp1Char(), bearingHousing.getTemp1Char());
		Assert.assertEquals(copy.getTemp1Dec(), bearingHousing.getTemp1Dec());
		Assert.assertEquals(copy.getTemp2Char(), bearingHousing.getTemp2Char());
		Assert.assertEquals(copy.getTemp2Dec(), bearingHousing.getTemp2Dec());
		Assert.assertEquals(copy.getTemp2Int(), bearingHousing.getTemp2Int());
		Assert.assertEquals(copy.getTemp3Char(), bearingHousing.getTemp3Char());
		Assert.assertEquals(copy.getTemp3Dec(), bearingHousing.getTemp3Dec());
		Assert.assertEquals(copy.getTemp3Int(), bearingHousing.getTemp3Int());
		Assert.assertEquals(copy.getTemp4Char(), bearingHousing.getTemp4Char());
		Assert.assertEquals(copy.getTemp4Dec(), bearingHousing.getTemp4Dec());
		Assert.assertEquals(copy.getTemp5Char(), bearingHousing.getTemp5Char());
		Assert.assertEquals(copy.getTemp5Dec(), bearingHousing.getTemp5Dec());
		Assert.assertEquals(copy.getTemp6Char(), bearingHousing.getTemp6Char());
		Assert.assertEquals(copy.getTemp6Dec(), bearingHousing.getTemp6Dec());
		Assert.assertEquals(copy.getTemp7Char(), bearingHousing.getTemp7Char());
		Assert.assertEquals(copy.getTemp8Char(), bearingHousing.getTemp8Char());
		Assert.assertEquals(copy.getWaterPorts(), bearingHousing.getWaterPorts());
		// tests for coverage completeness
		Assert.assertFalse(bearingHousing.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(bearingHousing.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}
	/**
	 * Hibernate test case for table: ti.bearing_spacer.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testBearingSpacer() throws CloneNotSupportedException {

	 	DataLayerTi dataLayerTi = DataLayerTiImpl.getInstance();
		BearingSpacer bearingSpacer = TiDataPoolFactory.getBearingSpacer();
		dataLayerTi.saveOrUpdate(bearingSpacer);

		Integer bearingSpacerId = bearingSpacer.getId();
		BearingSpacer copy = bearingSpacer.clone();
		dataLayerTi.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerTi.evict(bearingSpacer); 		 

		bearingSpacer = dataLayerTi.getBearingSpacer(bearingSpacerId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getDescription(), bearingSpacer.getDescription());
		Assert.assertEquals(copy.getImportPk(), bearingSpacer.getImportPk());
		Assert.assertEquals(copy.getInactive(), bearingSpacer.getInactive());
		Assert.assertEquals(copy.getInsideDimMax(), bearingSpacer.getInsideDimMax());
		Assert.assertEquals(copy.getInsideDimMin(), bearingSpacer.getInsideDimMin());
		Assert.assertEquals(copy.getManfr().getId(), bearingSpacer.getManfr().getId());
		Assert.assertEquals(copy.getManfrPartNum(), bearingSpacer.getManfrPartNum());
		Assert.assertEquals(copy.getName(), bearingSpacer.getName());
		Assert.assertEquals(copy.getOutsideDimMax(), bearingSpacer.getOutsideDimMax());
		Assert.assertEquals(copy.getOutsideDimMin(), bearingSpacer.getOutsideDimMin());
		Assert.assertEquals(copy.getPartType().getId(), bearingSpacer.getPartType().getId());
		Assert.assertEquals(copy.getStandardBearingSpacers(), bearingSpacer.getStandardBearingSpacers());
		Assert.assertEquals(copy.getTemp1Char(), bearingSpacer.getTemp1Char());
		Assert.assertEquals(copy.getTemp1Dec(), bearingSpacer.getTemp1Dec());
		Assert.assertEquals(copy.getTemp2Char(), bearingSpacer.getTemp2Char());
		Assert.assertEquals(copy.getTemp2Dec(), bearingSpacer.getTemp2Dec());
		Assert.assertEquals(copy.getTemp2Int(), bearingSpacer.getTemp2Int());
		Assert.assertEquals(copy.getTemp3Char(), bearingSpacer.getTemp3Char());
		Assert.assertEquals(copy.getTemp3Dec(), bearingSpacer.getTemp3Dec());
		Assert.assertEquals(copy.getTemp3Int(), bearingSpacer.getTemp3Int());
		Assert.assertEquals(copy.getTemp4Char(), bearingSpacer.getTemp4Char());
		Assert.assertEquals(copy.getTemp4Dec(), bearingSpacer.getTemp4Dec());
		Assert.assertEquals(copy.getTemp5Char(), bearingSpacer.getTemp5Char());
		Assert.assertEquals(copy.getTemp5Dec(), bearingSpacer.getTemp5Dec());
		Assert.assertEquals(copy.getTemp6Char(), bearingSpacer.getTemp6Char());
		Assert.assertEquals(copy.getTemp6Dec(), bearingSpacer.getTemp6Dec());
		Assert.assertEquals(copy.getTemp7Char(), bearingSpacer.getTemp7Char());
		Assert.assertEquals(copy.getTemp8Char(), bearingSpacer.getTemp8Char());
		// tests for coverage completeness
		Assert.assertFalse(bearingSpacer.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(bearingSpacer.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}
	/**
	 * Hibernate test case for table: ti.bom.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testBom() throws CloneNotSupportedException {

	 	DataLayerTi dataLayerTi = DataLayerTiImpl.getInstance();
		Bom bom = TiDataPoolFactory.getBom();
		dataLayerTi.saveOrUpdate(bom);

		Integer bomId = bom.getId();
		Bom copy = bom.clone();
		dataLayerTi.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerTi.evict(bom); 		 

		bom = dataLayerTi.getBom(bomId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getChildPart().getId(), bom.getChildPart().getId());
		Assert.assertEquals(copy.getParentPart().getId(), bom.getParentPart().getId());
		Assert.assertEquals(copy.getQuantity(), bom.getQuantity());
		// tests for coverage completeness
		Assert.assertFalse(bom.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(bom.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}
	/**
	 * Hibernate test case for table: ti.bom_alt_header.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testBomAltHeader() throws CloneNotSupportedException {

	 	DataLayerTi dataLayerTi = DataLayerTiImpl.getInstance();
		BomAltHeader bomAltHeader = TiDataPoolFactory.getBomAltHeader();
		dataLayerTi.saveOrUpdate(bomAltHeader);

		Integer bomAltHeaderId = bomAltHeader.getId();
		BomAltHeader copy = bomAltHeader.clone();
		dataLayerTi.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerTi.evict(bomAltHeader); 		 

		bomAltHeader = dataLayerTi.getBomAltHeader(bomAltHeaderId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getDescription(), bomAltHeader.getDescription());
		Assert.assertEquals(copy.getName(), bomAltHeader.getName());
		// tests for coverage completeness
		Assert.assertFalse(bomAltHeader.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(bomAltHeader.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}
	/**
	 * Hibernate test case for table: ti.bom_alt_item.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testBomAltItem() throws CloneNotSupportedException {

	 	DataLayerTi dataLayerTi = DataLayerTiImpl.getInstance();
		BomAltItem bomAltItem = TiDataPoolFactory.getBomAltItem();
		// Cascading on this property was switched off from config (or requires hbn bug workaround). Performing manual cascade.
		com.turbointernational.metadata.yourProjectName.factories.ti.HibernateTiDaoFactory.getBomDao().saveOrUpdate(((com.turbointernational.metadata.yourProjectName.model.obj.ti.BomAltItemPK)bomAltItem.getId()).getBom());
		// Cascading on this property was switched off from config (or requires hbn bug workaround). Performing manual cascade.
		com.turbointernational.metadata.yourProjectName.factories.ti.HibernateTiDaoFactory.getBomAltHeaderDao().saveOrUpdate(((com.turbointernational.metadata.yourProjectName.model.obj.ti.BomAltItemPK)bomAltItem.getId()).getBomAltHeader());
		dataLayerTi.saveOrUpdate(bomAltItem);

		BomAltItemPK bomAltItemId = bomAltItem.getId();
		BomAltItem copy = bomAltItem.clone();
		dataLayerTi.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerTi.evict(bomAltItem); 		 

		bomAltItem = dataLayerTi.getBomAltItem(bomAltItemId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getId(), bomAltItem.getId());
		Assert.assertEquals(copy.getPart().getId(), bomAltItem.getPart().getId());
		// tests for coverage completeness
		Assert.assertFalse(bomAltItem.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(bomAltItem.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}
	/**
	 * Hibernate test case for table: ti.bom_hierarchy.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testBomHierarchy() throws CloneNotSupportedException {

	 	DataLayerTi dataLayerTi = DataLayerTiImpl.getInstance();
		BomHierarchy bomHierarchy = TiDataPoolFactory.getBomHierarchy();
		dataLayerTi.saveOrUpdate(bomHierarchy);

		Integer bomHierarchyId = bomHierarchy.getId();
		BomHierarchy copy = bomHierarchy.clone();
		dataLayerTi.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerTi.evict(bomHierarchy); 		 

		bomHierarchy = dataLayerTi.getBomHierarchy(bomHierarchyId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getChildPartType().getId(), bomHierarchy.getChildPartType().getId());
		Assert.assertEquals(copy.getParentPartType().getId(), bomHierarchy.getParentPartType().getId());
		// tests for coverage completeness
		Assert.assertFalse(bomHierarchy.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(bomHierarchy.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}
	/**
	 * Hibernate test case for table: ti.cartridge.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testCartridge() throws CloneNotSupportedException {

	 	DataLayerTi dataLayerTi = DataLayerTiImpl.getInstance();
		Cartridge cartridge = TiDataPoolFactory.getCartridge();
		dataLayerTi.saveOrUpdate(cartridge);

		Integer cartridgeId = cartridge.getId();
		Cartridge copy = cartridge.clone();
		dataLayerTi.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerTi.evict(cartridge); 		 

		cartridge = dataLayerTi.getCartridge(cartridgeId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getDescription(), cartridge.getDescription());
		Assert.assertEquals(copy.getImportPk(), cartridge.getImportPk());
		Assert.assertEquals(copy.getInactive(), cartridge.getInactive());
		Assert.assertEquals(copy.getManfr().getId(), cartridge.getManfr().getId());
		Assert.assertEquals(copy.getManfrPartNum(), cartridge.getManfrPartNum());
		Assert.assertEquals(copy.getName(), cartridge.getName());
		Assert.assertEquals(copy.getPartType().getId(), cartridge.getPartType().getId());
		Assert.assertEquals(copy.getTemp1Char(), cartridge.getTemp1Char());
		Assert.assertEquals(copy.getTemp1Dec(), cartridge.getTemp1Dec());
		Assert.assertEquals(copy.getTemp2Char(), cartridge.getTemp2Char());
		Assert.assertEquals(copy.getTemp2Dec(), cartridge.getTemp2Dec());
		Assert.assertEquals(copy.getTemp2Int(), cartridge.getTemp2Int());
		Assert.assertEquals(copy.getTemp3Char(), cartridge.getTemp3Char());
		Assert.assertEquals(copy.getTemp3Dec(), cartridge.getTemp3Dec());
		Assert.assertEquals(copy.getTemp3Int(), cartridge.getTemp3Int());
		Assert.assertEquals(copy.getTemp4Char(), cartridge.getTemp4Char());
		Assert.assertEquals(copy.getTemp4Dec(), cartridge.getTemp4Dec());
		Assert.assertEquals(copy.getTemp5Char(), cartridge.getTemp5Char());
		Assert.assertEquals(copy.getTemp5Dec(), cartridge.getTemp5Dec());
		Assert.assertEquals(copy.getTemp6Char(), cartridge.getTemp6Char());
		Assert.assertEquals(copy.getTemp6Dec(), cartridge.getTemp6Dec());
		Assert.assertEquals(copy.getTemp7Char(), cartridge.getTemp7Char());
		Assert.assertEquals(copy.getTemp8Char(), cartridge.getTemp8Char());
		// tests for coverage completeness
		Assert.assertFalse(cartridge.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(cartridge.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}
	/**
	 * Hibernate test case for table: ti.compressor_wheel.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testCompressorWheel() throws CloneNotSupportedException {

	 	DataLayerTi dataLayerTi = DataLayerTiImpl.getInstance();
		CompressorWheel compressorWheel = TiDataPoolFactory.getCompressorWheel();
		dataLayerTi.saveOrUpdate(compressorWheel);

		Integer compressorWheelId = compressorWheel.getId();
		CompressorWheel copy = compressorWheel.clone();
		dataLayerTi.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerTi.evict(compressorWheel); 		 

		compressorWheel = dataLayerTi.getCompressorWheel(compressorWheelId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getApplication(), compressorWheel.getApplication());
		Assert.assertEquals(copy.getBoreOe(), compressorWheel.getBoreOe());
		Assert.assertEquals(copy.getDescription(), compressorWheel.getDescription());
		Assert.assertEquals(copy.getExducerOc(), compressorWheel.getExducerOc());
		Assert.assertEquals(copy.getHubLengthD(), compressorWheel.getHubLengthD());
		Assert.assertEquals(copy.getImportPk(), compressorWheel.getImportPk());
		Assert.assertEquals(copy.getInactive(), compressorWheel.getInactive());
		Assert.assertEquals(copy.getInducerOa(), compressorWheel.getInducerOa());
		Assert.assertEquals(copy.getManfr().getId(), compressorWheel.getManfr().getId());
		Assert.assertEquals(copy.getManfrPartNum(), compressorWheel.getManfrPartNum());
		Assert.assertEquals(copy.getName(), compressorWheel.getName());
		Assert.assertEquals(copy.getPartType().getId(), compressorWheel.getPartType().getId());
		Assert.assertEquals(copy.getTemp1Char(), compressorWheel.getTemp1Char());
		Assert.assertEquals(copy.getTemp1Dec(), compressorWheel.getTemp1Dec());
		Assert.assertEquals(copy.getTemp2Char(), compressorWheel.getTemp2Char());
		Assert.assertEquals(copy.getTemp2Dec(), compressorWheel.getTemp2Dec());
		Assert.assertEquals(copy.getTemp2Int(), compressorWheel.getTemp2Int());
		Assert.assertEquals(copy.getTemp3Char(), compressorWheel.getTemp3Char());
		Assert.assertEquals(copy.getTemp3Dec(), compressorWheel.getTemp3Dec());
		Assert.assertEquals(copy.getTemp3Int(), compressorWheel.getTemp3Int());
		Assert.assertEquals(copy.getTemp4Char(), compressorWheel.getTemp4Char());
		Assert.assertEquals(copy.getTemp4Dec(), compressorWheel.getTemp4Dec());
		Assert.assertEquals(copy.getTemp5Char(), compressorWheel.getTemp5Char());
		Assert.assertEquals(copy.getTemp5Dec(), compressorWheel.getTemp5Dec());
		Assert.assertEquals(copy.getTemp6Char(), compressorWheel.getTemp6Char());
		Assert.assertEquals(copy.getTemp6Dec(), compressorWheel.getTemp6Dec());
		Assert.assertEquals(copy.getTemp7Char(), compressorWheel.getTemp7Char());
		Assert.assertEquals(copy.getTemp8Char(), compressorWheel.getTemp8Char());
		Assert.assertEquals(copy.getTipHeightB(), compressorWheel.getTipHeightB());
		Assert.assertEquals(copy.getTrimNoBlades(), compressorWheel.getTrimNoBlades());
		// tests for coverage completeness
		Assert.assertFalse(compressorWheel.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(compressorWheel.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}
	/**
	 * Hibernate test case for table: ti.cool_type.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testCoolType() throws CloneNotSupportedException {

	 	DataLayerTi dataLayerTi = DataLayerTiImpl.getInstance();
		CoolType coolType = TiDataPoolFactory.getCoolType();
		dataLayerTi.saveOrUpdate(coolType);

		Integer coolTypeId = coolType.getId();
		CoolType copy = coolType.clone();
		dataLayerTi.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerTi.evict(coolType); 		 

		coolType = dataLayerTi.getCoolType(coolTypeId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getImportPk(), coolType.getImportPk());
		Assert.assertEquals(copy.getName(), coolType.getName());
		// tests for coverage completeness
		Assert.assertFalse(coolType.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(coolType.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}
	/**
	 * Hibernate test case for table: ti.gasket.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testGasket() throws CloneNotSupportedException {

	 	DataLayerTi dataLayerTi = DataLayerTiImpl.getInstance();
		Gasket gasket = TiDataPoolFactory.getGasket();
		dataLayerTi.saveOrUpdate(gasket);

		Integer gasketId = gasket.getId();
		Gasket copy = gasket.clone();
		dataLayerTi.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerTi.evict(gasket); 		 

		gasket = dataLayerTi.getGasket(gasketId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getDescription(), gasket.getDescription());
		Assert.assertEquals(copy.getGasketType().getId(), gasket.getGasketType().getId());
		Assert.assertEquals(copy.getImportPk(), gasket.getImportPk());
		Assert.assertEquals(copy.getInactive(), gasket.getInactive());
		Assert.assertEquals(copy.getManfr().getId(), gasket.getManfr().getId());
		Assert.assertEquals(copy.getManfrPartNum(), gasket.getManfrPartNum());
		Assert.assertEquals(copy.getName(), gasket.getName());
		Assert.assertEquals(copy.getPartType().getId(), gasket.getPartType().getId());
		Assert.assertEquals(copy.getTemp1Char(), gasket.getTemp1Char());
		Assert.assertEquals(copy.getTemp1Dec(), gasket.getTemp1Dec());
		Assert.assertEquals(copy.getTemp2Char(), gasket.getTemp2Char());
		Assert.assertEquals(copy.getTemp2Dec(), gasket.getTemp2Dec());
		Assert.assertEquals(copy.getTemp2Int(), gasket.getTemp2Int());
		Assert.assertEquals(copy.getTemp3Char(), gasket.getTemp3Char());
		Assert.assertEquals(copy.getTemp3Dec(), gasket.getTemp3Dec());
		Assert.assertEquals(copy.getTemp3Int(), gasket.getTemp3Int());
		Assert.assertEquals(copy.getTemp4Char(), gasket.getTemp4Char());
		Assert.assertEquals(copy.getTemp4Dec(), gasket.getTemp4Dec());
		Assert.assertEquals(copy.getTemp5Char(), gasket.getTemp5Char());
		Assert.assertEquals(copy.getTemp5Dec(), gasket.getTemp5Dec());
		Assert.assertEquals(copy.getTemp6Char(), gasket.getTemp6Char());
		Assert.assertEquals(copy.getTemp6Dec(), gasket.getTemp6Dec());
		Assert.assertEquals(copy.getTemp7Char(), gasket.getTemp7Char());
		Assert.assertEquals(copy.getTemp8Char(), gasket.getTemp8Char());
		// tests for coverage completeness
		Assert.assertFalse(gasket.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(gasket.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}
	/**
	 * Hibernate test case for table: ti.gasket_type.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testGasketType() throws CloneNotSupportedException {

	 	DataLayerTi dataLayerTi = DataLayerTiImpl.getInstance();
		GasketType gasketType = TiDataPoolFactory.getGasketType();
		dataLayerTi.saveOrUpdate(gasketType);

		Integer gasketTypeId = gasketType.getId();
		GasketType copy = gasketType.clone();
		dataLayerTi.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerTi.evict(gasketType); 		 

		gasketType = dataLayerTi.getGasketType(gasketTypeId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getImportPk(), gasketType.getImportPk());
		Assert.assertEquals(copy.getName(), gasketType.getName());
		// tests for coverage completeness
		Assert.assertFalse(gasketType.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(gasketType.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}
	/**
	 * Hibernate test case for table: ti.heatshield.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testHeatshield() throws CloneNotSupportedException {

	 	DataLayerTi dataLayerTi = DataLayerTiImpl.getInstance();
		Heatshield heatshield = TiDataPoolFactory.getHeatshield();
		dataLayerTi.saveOrUpdate(heatshield);

		Integer heatshieldId = heatshield.getId();
		Heatshield copy = heatshield.clone();
		dataLayerTi.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerTi.evict(heatshield); 		 

		heatshield = dataLayerTi.getHeatshield(heatshieldId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getDescription(), heatshield.getDescription());
		Assert.assertEquals(copy.getImportPk(), heatshield.getImportPk());
		Assert.assertEquals(copy.getInactive(), heatshield.getInactive());
		Assert.assertEquals(copy.getInducerDiameter(), heatshield.getInducerDiameter());
		Assert.assertEquals(copy.getInsideDiameter(), heatshield.getInsideDiameter());
		Assert.assertEquals(copy.getManfr().getId(), heatshield.getManfr().getId());
		Assert.assertEquals(copy.getManfrPartNum(), heatshield.getManfrPartNum());
		Assert.assertEquals(copy.getName(), heatshield.getName());
		Assert.assertEquals(copy.getNotes(), heatshield.getNotes());
		Assert.assertEquals(copy.getOverallDiameter(), heatshield.getOverallDiameter());
		Assert.assertEquals(copy.getPartType().getId(), heatshield.getPartType().getId());
		Assert.assertEquals(copy.getTemp1Char(), heatshield.getTemp1Char());
		Assert.assertEquals(copy.getTemp1Dec(), heatshield.getTemp1Dec());
		Assert.assertEquals(copy.getTemp2Char(), heatshield.getTemp2Char());
		Assert.assertEquals(copy.getTemp2Dec(), heatshield.getTemp2Dec());
		Assert.assertEquals(copy.getTemp2Int(), heatshield.getTemp2Int());
		Assert.assertEquals(copy.getTemp3Char(), heatshield.getTemp3Char());
		Assert.assertEquals(copy.getTemp3Dec(), heatshield.getTemp3Dec());
		Assert.assertEquals(copy.getTemp3Int(), heatshield.getTemp3Int());
		Assert.assertEquals(copy.getTemp4Char(), heatshield.getTemp4Char());
		Assert.assertEquals(copy.getTemp4Dec(), heatshield.getTemp4Dec());
		Assert.assertEquals(copy.getTemp5Char(), heatshield.getTemp5Char());
		Assert.assertEquals(copy.getTemp5Dec(), heatshield.getTemp5Dec());
		Assert.assertEquals(copy.getTemp6Char(), heatshield.getTemp6Char());
		Assert.assertEquals(copy.getTemp6Dec(), heatshield.getTemp6Dec());
		Assert.assertEquals(copy.getTemp7Char(), heatshield.getTemp7Char());
		Assert.assertEquals(copy.getTemp8Char(), heatshield.getTemp8Char());
		// tests for coverage completeness
		Assert.assertFalse(heatshield.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(heatshield.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}
	/**
	 * Hibernate test case for table: ti.i_interchange_log.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testIInterchangeLog() throws CloneNotSupportedException {

	 	DataLayerTi dataLayerTi = DataLayerTiImpl.getInstance();
		IInterchangeLog iInterchangeLog = TiDataPoolFactory.getIInterchangeLog();
		dataLayerTi.saveOrUpdate(iInterchangeLog);

		Integer iInterchangeLogId = iInterchangeLog.getId();
		IInterchangeLog copy = iInterchangeLog.clone();
		dataLayerTi.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerTi.evict(iInterchangeLog); 		 

		iInterchangeLog = dataLayerTi.getIInterchangeLog(iInterchangeLogId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getDate().getTime() / 1000, iInterchangeLog.getDate().getTime() / 1000);
		Assert.assertEquals(copy.getDescription(), iInterchangeLog.getDescription());
		Assert.assertEquals(copy.getInterchangeCntUniq(), iInterchangeLog.getInterchangeCntUniq());
		Assert.assertEquals(copy.getInterchangeHeaderId(), iInterchangeLog.getInterchangeHeaderId());
		Assert.assertEquals(copy.getPartNumId(), iInterchangeLog.getPartNumId());
		// tests for coverage completeness
		Assert.assertFalse(iInterchangeLog.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(iInterchangeLog.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}
	/**
	 * Hibernate test case for table: ti.interchange_header.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testInterchangeHeader() throws CloneNotSupportedException {

	 	DataLayerTi dataLayerTi = DataLayerTiImpl.getInstance();
		InterchangeHeader interchangeHeader = TiDataPoolFactory.getInterchangeHeader();
		dataLayerTi.saveOrUpdate(interchangeHeader);

		Integer interchangeHeaderId = interchangeHeader.getId();
		InterchangeHeader copy = interchangeHeader.clone();
		dataLayerTi.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerTi.evict(interchangeHeader); 		 

		interchangeHeader = dataLayerTi.getInterchangeHeader(interchangeHeaderId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getDescription(), interchangeHeader.getDescription());
		Assert.assertEquals(copy.getName(), interchangeHeader.getName());
		// tests for coverage completeness
		Assert.assertFalse(interchangeHeader.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(interchangeHeader.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}
	/**
	 * Hibernate test case for table: ti.interchange_item.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testInterchangeItem() throws CloneNotSupportedException {

	 	DataLayerTi dataLayerTi = DataLayerTiImpl.getInstance();
		InterchangeItem interchangeItem = TiDataPoolFactory.getInterchangeItem();
		dataLayerTi.saveOrUpdate(interchangeItem);

		Integer interchangeItemId = interchangeItem.getId();
		InterchangeItem copy = interchangeItem.clone();
		dataLayerTi.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerTi.evict(interchangeItem); 		 

		interchangeItem = dataLayerTi.getInterchangeItem(interchangeItemId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getDescription(), interchangeItem.getDescription());
		Assert.assertEquals(copy.getImportPk(), interchangeItem.getImportPk());
		Assert.assertEquals(copy.getInactive(), interchangeItem.getInactive());
		Assert.assertEquals(copy.getInterchangeHeader().getId(), interchangeItem.getInterchangeHeader().getId());
		Assert.assertEquals(copy.getManfr().getId(), interchangeItem.getManfr().getId());
		Assert.assertEquals(copy.getManfrPartNum(), interchangeItem.getManfrPartNum());
		Assert.assertEquals(copy.getName(), interchangeItem.getName());
		Assert.assertEquals(copy.getPartType().getId(), interchangeItem.getPartType().getId());
		Assert.assertEquals(copy.getTemp1Char(), interchangeItem.getTemp1Char());
		Assert.assertEquals(copy.getTemp1Dec(), interchangeItem.getTemp1Dec());
		Assert.assertEquals(copy.getTemp2Char(), interchangeItem.getTemp2Char());
		Assert.assertEquals(copy.getTemp2Dec(), interchangeItem.getTemp2Dec());
		Assert.assertEquals(copy.getTemp2Int(), interchangeItem.getTemp2Int());
		Assert.assertEquals(copy.getTemp3Char(), interchangeItem.getTemp3Char());
		Assert.assertEquals(copy.getTemp3Dec(), interchangeItem.getTemp3Dec());
		Assert.assertEquals(copy.getTemp3Int(), interchangeItem.getTemp3Int());
		Assert.assertEquals(copy.getTemp4Char(), interchangeItem.getTemp4Char());
		Assert.assertEquals(copy.getTemp4Dec(), interchangeItem.getTemp4Dec());
		Assert.assertEquals(copy.getTemp5Char(), interchangeItem.getTemp5Char());
		Assert.assertEquals(copy.getTemp5Dec(), interchangeItem.getTemp5Dec());
		Assert.assertEquals(copy.getTemp6Char(), interchangeItem.getTemp6Char());
		Assert.assertEquals(copy.getTemp6Dec(), interchangeItem.getTemp6Dec());
		Assert.assertEquals(copy.getTemp7Char(), interchangeItem.getTemp7Char());
		Assert.assertEquals(copy.getTemp8Char(), interchangeItem.getTemp8Char());
		// tests for coverage completeness
		Assert.assertFalse(interchangeItem.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(interchangeItem.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}
	/**
	 * Hibernate test case for table: ti.journal_bearing.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testJournalBearing() throws CloneNotSupportedException {

	 	DataLayerTi dataLayerTi = DataLayerTiImpl.getInstance();
		JournalBearing journalBearing = TiDataPoolFactory.getJournalBearing();
		dataLayerTi.saveOrUpdate(journalBearing);

		Integer journalBearingId = journalBearing.getId();
		JournalBearing copy = journalBearing.clone();
		dataLayerTi.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerTi.evict(journalBearing); 		 

		journalBearing = dataLayerTi.getJournalBearing(journalBearingId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getDescription(), journalBearing.getDescription());
		Assert.assertEquals(copy.getImportPk(), journalBearing.getImportPk());
		Assert.assertEquals(copy.getInactive(), journalBearing.getInactive());
		Assert.assertEquals(copy.getInsideDimMax(), journalBearing.getInsideDimMax());
		Assert.assertEquals(copy.getInsideDimMin(), journalBearing.getInsideDimMin());
		Assert.assertEquals(copy.getManfr().getId(), journalBearing.getManfr().getId());
		Assert.assertEquals(copy.getManfrPartNum(), journalBearing.getManfrPartNum());
		Assert.assertEquals(copy.getName(), journalBearing.getName());
		Assert.assertEquals(copy.getOutsideDimMax(), journalBearing.getOutsideDimMax());
		Assert.assertEquals(copy.getOutsideDimMin(), journalBearing.getOutsideDimMin());
		Assert.assertEquals(copy.getPartType().getId(), journalBearing.getPartType().getId());
		Assert.assertEquals(copy.getStandardJournalBearings(), journalBearing.getStandardJournalBearings());
		Assert.assertEquals(copy.getTemp1Char(), journalBearing.getTemp1Char());
		Assert.assertEquals(copy.getTemp1Dec(), journalBearing.getTemp1Dec());
		Assert.assertEquals(copy.getTemp2Char(), journalBearing.getTemp2Char());
		Assert.assertEquals(copy.getTemp2Dec(), journalBearing.getTemp2Dec());
		Assert.assertEquals(copy.getTemp2Int(), journalBearing.getTemp2Int());
		Assert.assertEquals(copy.getTemp3Char(), journalBearing.getTemp3Char());
		Assert.assertEquals(copy.getTemp3Dec(), journalBearing.getTemp3Dec());
		Assert.assertEquals(copy.getTemp3Int(), journalBearing.getTemp3Int());
		Assert.assertEquals(copy.getTemp4Char(), journalBearing.getTemp4Char());
		Assert.assertEquals(copy.getTemp4Dec(), journalBearing.getTemp4Dec());
		Assert.assertEquals(copy.getTemp5Char(), journalBearing.getTemp5Char());
		Assert.assertEquals(copy.getTemp5Dec(), journalBearing.getTemp5Dec());
		Assert.assertEquals(copy.getTemp6Char(), journalBearing.getTemp6Char());
		Assert.assertEquals(copy.getTemp6Dec(), journalBearing.getTemp6Dec());
		Assert.assertEquals(copy.getTemp7Char(), journalBearing.getTemp7Char());
		Assert.assertEquals(copy.getTemp8Char(), journalBearing.getTemp8Char());
		Assert.assertEquals(copy.getWidth(), journalBearing.getWidth());
		// tests for coverage completeness
		Assert.assertFalse(journalBearing.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(journalBearing.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}
	/**
	 * Hibernate test case for table: ti.kit.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testKit() throws CloneNotSupportedException {

	 	DataLayerTi dataLayerTi = DataLayerTiImpl.getInstance();
		Kit kit = TiDataPoolFactory.getKit();
		dataLayerTi.saveOrUpdate(kit);

		Integer kitId = kit.getId();
		Kit copy = kit.clone();
		dataLayerTi.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerTi.evict(kit); 		 

		kit = dataLayerTi.getKit(kitId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getDescription(), kit.getDescription());
		Assert.assertEquals(copy.getImportPk(), kit.getImportPk());
		Assert.assertEquals(copy.getInactive(), kit.getInactive());
		Assert.assertEquals(copy.getKitType().getId(), kit.getKitType().getId());
		Assert.assertEquals(copy.getManfr().getId(), kit.getManfr().getId());
		Assert.assertEquals(copy.getManfrPartNum(), kit.getManfrPartNum());
		Assert.assertEquals(copy.getName(), kit.getName());
		Assert.assertEquals(copy.getPartType().getId(), kit.getPartType().getId());
		Assert.assertEquals(copy.getTemp1Char(), kit.getTemp1Char());
		Assert.assertEquals(copy.getTemp1Dec(), kit.getTemp1Dec());
		Assert.assertEquals(copy.getTemp2Char(), kit.getTemp2Char());
		Assert.assertEquals(copy.getTemp2Dec(), kit.getTemp2Dec());
		Assert.assertEquals(copy.getTemp2Int(), kit.getTemp2Int());
		Assert.assertEquals(copy.getTemp3Char(), kit.getTemp3Char());
		Assert.assertEquals(copy.getTemp3Dec(), kit.getTemp3Dec());
		Assert.assertEquals(copy.getTemp3Int(), kit.getTemp3Int());
		Assert.assertEquals(copy.getTemp4Char(), kit.getTemp4Char());
		Assert.assertEquals(copy.getTemp4Dec(), kit.getTemp4Dec());
		Assert.assertEquals(copy.getTemp5Char(), kit.getTemp5Char());
		Assert.assertEquals(copy.getTemp5Dec(), kit.getTemp5Dec());
		Assert.assertEquals(copy.getTemp6Char(), kit.getTemp6Char());
		Assert.assertEquals(copy.getTemp6Dec(), kit.getTemp6Dec());
		Assert.assertEquals(copy.getTemp7Char(), kit.getTemp7Char());
		Assert.assertEquals(copy.getTemp8Char(), kit.getTemp8Char());
		// tests for coverage completeness
		Assert.assertFalse(kit.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(kit.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}
	/**
	 * Hibernate test case for table: ti.kit_type.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testKitType() throws CloneNotSupportedException {

	 	DataLayerTi dataLayerTi = DataLayerTiImpl.getInstance();
		KitType kitType = TiDataPoolFactory.getKitType();
		dataLayerTi.saveOrUpdate(kitType);

		Integer kitTypeId = kitType.getId();
		KitType copy = kitType.clone();
		dataLayerTi.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerTi.evict(kitType); 		 

		kitType = dataLayerTi.getKitType(kitTypeId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getImportPk(), kitType.getImportPk());
		Assert.assertEquals(copy.getName(), kitType.getName());
		// tests for coverage completeness
		Assert.assertFalse(kitType.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(kitType.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}
	/**
	 * Hibernate test case for table: ti.manfr.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testManfr() throws CloneNotSupportedException {

	 	DataLayerTi dataLayerTi = DataLayerTiImpl.getInstance();
		Manfr manfr = TiDataPoolFactory.getManfr();
		dataLayerTi.saveOrUpdate(manfr);

		Integer manfrId = manfr.getId();
		Manfr copy = manfr.clone();
		dataLayerTi.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerTi.evict(manfr); 		 

		manfr = dataLayerTi.getManfr(manfrId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getImportPk(), manfr.getImportPk());
		Assert.assertEquals(copy.getManfrType().getId(), manfr.getManfrType().getId());
		Assert.assertEquals(copy.getName(), manfr.getName());
		// tests for coverage completeness
		Assert.assertFalse(manfr.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(manfr.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}
	/**
	 * Hibernate test case for table: ti.manfr_type.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testManfrType() throws CloneNotSupportedException {

	 	DataLayerTi dataLayerTi = DataLayerTiImpl.getInstance();
		ManfrType manfrType = TiDataPoolFactory.getManfrType();
		dataLayerTi.saveOrUpdate(manfrType);

		Integer manfrTypeId = manfrType.getId();
		ManfrType copy = manfrType.clone();
		dataLayerTi.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerTi.evict(manfrType); 		 

		manfrType = dataLayerTi.getManfrType(manfrTypeId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getName(), manfrType.getName());
		// tests for coverage completeness
		Assert.assertFalse(manfrType.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(manfrType.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}
	/**
	 * Hibernate test case for table: ti.nozzle_ring.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testNozzleRing() throws CloneNotSupportedException {

	 	DataLayerTi dataLayerTi = DataLayerTiImpl.getInstance();
		NozzleRing nozzleRing = TiDataPoolFactory.getNozzleRing();
		dataLayerTi.saveOrUpdate(nozzleRing);

		Integer nozzleRingId = nozzleRing.getId();
		NozzleRing copy = nozzleRing.clone();
		dataLayerTi.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerTi.evict(nozzleRing); 		 

		nozzleRing = dataLayerTi.getNozzleRing(nozzleRingId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getDescription(), nozzleRing.getDescription());
		Assert.assertEquals(copy.getImportPk(), nozzleRing.getImportPk());
		Assert.assertEquals(copy.getInactive(), nozzleRing.getInactive());
		Assert.assertEquals(copy.getManfr().getId(), nozzleRing.getManfr().getId());
		Assert.assertEquals(copy.getManfrPartNum(), nozzleRing.getManfrPartNum());
		Assert.assertEquals(copy.getName(), nozzleRing.getName());
		Assert.assertEquals(copy.getPartType().getId(), nozzleRing.getPartType().getId());
		Assert.assertEquals(copy.getTemp1Char(), nozzleRing.getTemp1Char());
		Assert.assertEquals(copy.getTemp1Dec(), nozzleRing.getTemp1Dec());
		Assert.assertEquals(copy.getTemp2Char(), nozzleRing.getTemp2Char());
		Assert.assertEquals(copy.getTemp2Dec(), nozzleRing.getTemp2Dec());
		Assert.assertEquals(copy.getTemp2Int(), nozzleRing.getTemp2Int());
		Assert.assertEquals(copy.getTemp3Char(), nozzleRing.getTemp3Char());
		Assert.assertEquals(copy.getTemp3Dec(), nozzleRing.getTemp3Dec());
		Assert.assertEquals(copy.getTemp3Int(), nozzleRing.getTemp3Int());
		Assert.assertEquals(copy.getTemp4Char(), nozzleRing.getTemp4Char());
		Assert.assertEquals(copy.getTemp4Dec(), nozzleRing.getTemp4Dec());
		Assert.assertEquals(copy.getTemp5Char(), nozzleRing.getTemp5Char());
		Assert.assertEquals(copy.getTemp5Dec(), nozzleRing.getTemp5Dec());
		Assert.assertEquals(copy.getTemp6Char(), nozzleRing.getTemp6Char());
		Assert.assertEquals(copy.getTemp6Dec(), nozzleRing.getTemp6Dec());
		Assert.assertEquals(copy.getTemp7Char(), nozzleRing.getTemp7Char());
		Assert.assertEquals(copy.getTemp8Char(), nozzleRing.getTemp8Char());
		// tests for coverage completeness
		Assert.assertFalse(nozzleRing.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(nozzleRing.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}
	/**
	 * Hibernate test case for table: ti.part.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testPart() throws CloneNotSupportedException {

	 	DataLayerTi dataLayerTi = DataLayerTiImpl.getInstance();
		Part part = TiDataPoolFactory.getPart();
		dataLayerTi.saveOrUpdate(part);

		Integer partId = part.getId();
		Part copy = part.clone();
		dataLayerTi.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerTi.evict(part); 		 

		part = dataLayerTi.getPart(partId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getDescription(), part.getDescription());
		Assert.assertEquals(copy.getImportPk(), part.getImportPk());
		Assert.assertEquals(copy.getInactive(), part.getInactive());
		Assert.assertEquals(copy.getManfr().getId(), part.getManfr().getId());
		Assert.assertEquals(copy.getManfrPartNum(), part.getManfrPartNum());
		Assert.assertEquals(copy.getName(), part.getName());
		Assert.assertEquals(copy.getPartType().getId(), part.getPartType().getId());
		Assert.assertEquals(copy.getTemp1Char(), part.getTemp1Char());
		Assert.assertEquals(copy.getTemp1Dec(), part.getTemp1Dec());
		Assert.assertEquals(copy.getTemp2Char(), part.getTemp2Char());
		Assert.assertEquals(copy.getTemp2Dec(), part.getTemp2Dec());
		Assert.assertEquals(copy.getTemp2Int(), part.getTemp2Int());
		Assert.assertEquals(copy.getTemp3Char(), part.getTemp3Char());
		Assert.assertEquals(copy.getTemp3Dec(), part.getTemp3Dec());
		Assert.assertEquals(copy.getTemp3Int(), part.getTemp3Int());
		Assert.assertEquals(copy.getTemp4Char(), part.getTemp4Char());
		Assert.assertEquals(copy.getTemp4Dec(), part.getTemp4Dec());
		Assert.assertEquals(copy.getTemp5Char(), part.getTemp5Char());
		Assert.assertEquals(copy.getTemp5Dec(), part.getTemp5Dec());
		Assert.assertEquals(copy.getTemp6Char(), part.getTemp6Char());
		Assert.assertEquals(copy.getTemp6Dec(), part.getTemp6Dec());
		Assert.assertEquals(copy.getTemp7Char(), part.getTemp7Char());
		Assert.assertEquals(copy.getTemp8Char(), part.getTemp8Char());
		// tests for coverage completeness
		Assert.assertFalse(part.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(part.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}
	/**
	 * Hibernate test case for table: ti.part_attribute.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testPartAttribute() throws CloneNotSupportedException {

	 	DataLayerTi dataLayerTi = DataLayerTiImpl.getInstance();
		PartAttribute partAttribute = TiDataPoolFactory.getPartAttribute();
		dataLayerTi.saveOrUpdate(partAttribute);

		Integer partAttributeId = partAttribute.getId();
		PartAttribute copy = partAttribute.clone();
		dataLayerTi.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerTi.evict(partAttribute); 		 

		partAttribute = dataLayerTi.getPartAttribute(partAttributeId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getValue(), partAttribute.getValue());
		// tests for coverage completeness
		Assert.assertFalse(partAttribute.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(partAttribute.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}
	/**
	 * Hibernate test case for table: ti.part_turbo_type.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testPartTurboType() throws CloneNotSupportedException {

	 	DataLayerTi dataLayerTi = DataLayerTiImpl.getInstance();
		PartTurboType partTurboType = TiDataPoolFactory.getPartTurboType();
		// Cascading on this property was switched off from config (or requires hbn bug workaround). Performing manual cascade.
		com.turbointernational.metadata.yourProjectName.factories.ti.HibernateTiDaoFactory.getPartDao().saveOrUpdate(((com.turbointernational.metadata.yourProjectName.model.obj.ti.PartTurboTypePK)partTurboType.getId()).getPart());
		// Cascading on this property was switched off from config (or requires hbn bug workaround). Performing manual cascade.
		com.turbointernational.metadata.yourProjectName.factories.ti.HibernateTiDaoFactory.getTurboTypeDao().saveOrUpdate(((com.turbointernational.metadata.yourProjectName.model.obj.ti.PartTurboTypePK)partTurboType.getId()).getTurboType());
		dataLayerTi.saveOrUpdate(partTurboType);

		PartTurboTypePK partTurboTypeId = partTurboType.getId();
		PartTurboType copy = partTurboType.clone();
		dataLayerTi.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerTi.evict(partTurboType); 		 

		partTurboType = dataLayerTi.getPartTurboType(partTurboTypeId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getId(), partTurboType.getId());
		// tests for coverage completeness
		Assert.assertFalse(partTurboType.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(partTurboType.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}
	/**
	 * Hibernate test case for table: ti.part_type.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testPartType() throws CloneNotSupportedException {

	 	DataLayerTi dataLayerTi = DataLayerTiImpl.getInstance();
		PartType partType = TiDataPoolFactory.getPartType();
		dataLayerTi.saveOrUpdate(partType);

		Integer partTypeId = partType.getId();
		PartType copy = partType.clone();
		dataLayerTi.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerTi.evict(partType); 		 

		partType = dataLayerTi.getPartType(partTypeId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getImportPk(), partType.getImportPk());
		Assert.assertEquals(copy.getName(), partType.getName());
		// tests for coverage completeness
		Assert.assertFalse(partType.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(partType.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}
	/**
	 * Hibernate test case for table: ti.piston_ring.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testPistonRing() throws CloneNotSupportedException {

	 	DataLayerTi dataLayerTi = DataLayerTiImpl.getInstance();
		PistonRing pistonRing = TiDataPoolFactory.getPistonRing();
		dataLayerTi.saveOrUpdate(pistonRing);

		Integer pistonRingId = pistonRing.getId();
		PistonRing copy = pistonRing.clone();
		dataLayerTi.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerTi.evict(pistonRing); 		 

		pistonRing = dataLayerTi.getPistonRing(pistonRingId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getDescription(), pistonRing.getDescription());
		Assert.assertEquals(copy.getImportPk(), pistonRing.getImportPk());
		Assert.assertEquals(copy.getInactive(), pistonRing.getInactive());
		Assert.assertEquals(copy.getIGapMax(), pistonRing.getIGapMax());
		Assert.assertEquals(copy.getIGapMin(), pistonRing.getIGapMin());
		Assert.assertEquals(copy.getManfr().getId(), pistonRing.getManfr().getId());
		Assert.assertEquals(copy.getManfrPartNum(), pistonRing.getManfrPartNum());
		Assert.assertEquals(copy.getName(), pistonRing.getName());
		Assert.assertEquals(copy.getOutsideDimMax(), pistonRing.getOutsideDimMax());
		Assert.assertEquals(copy.getOutsideDimMin(), pistonRing.getOutsideDimMin());
		Assert.assertEquals(copy.getPartType().getId(), pistonRing.getPartType().getId());
		Assert.assertEquals(copy.getTemp1Char(), pistonRing.getTemp1Char());
		Assert.assertEquals(copy.getTemp1Dec(), pistonRing.getTemp1Dec());
		Assert.assertEquals(copy.getTemp2Char(), pistonRing.getTemp2Char());
		Assert.assertEquals(copy.getTemp2Dec(), pistonRing.getTemp2Dec());
		Assert.assertEquals(copy.getTemp2Int(), pistonRing.getTemp2Int());
		Assert.assertEquals(copy.getTemp3Char(), pistonRing.getTemp3Char());
		Assert.assertEquals(copy.getTemp3Dec(), pistonRing.getTemp3Dec());
		Assert.assertEquals(copy.getTemp3Int(), pistonRing.getTemp3Int());
		Assert.assertEquals(copy.getTemp4Char(), pistonRing.getTemp4Char());
		Assert.assertEquals(copy.getTemp4Dec(), pistonRing.getTemp4Dec());
		Assert.assertEquals(copy.getTemp5Char(), pistonRing.getTemp5Char());
		Assert.assertEquals(copy.getTemp5Dec(), pistonRing.getTemp5Dec());
		Assert.assertEquals(copy.getTemp6Char(), pistonRing.getTemp6Char());
		Assert.assertEquals(copy.getTemp6Dec(), pistonRing.getTemp6Dec());
		Assert.assertEquals(copy.getTemp7Char(), pistonRing.getTemp7Char());
		Assert.assertEquals(copy.getTemp8Char(), pistonRing.getTemp8Char());
		Assert.assertEquals(copy.getWidthMax(), pistonRing.getWidthMax());
		Assert.assertEquals(copy.getWidthMin(), pistonRing.getWidthMin());
		// tests for coverage completeness
		Assert.assertFalse(pistonRing.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(pistonRing.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}
	/**
	 * Hibernate test case for table: ti.seal_type.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testSealType() throws CloneNotSupportedException {

	 	DataLayerTi dataLayerTi = DataLayerTiImpl.getInstance();
		SealType sealType = TiDataPoolFactory.getSealType();
		dataLayerTi.saveOrUpdate(sealType);

		Integer sealTypeId = sealType.getId();
		SealType copy = sealType.clone();
		dataLayerTi.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerTi.evict(sealType); 		 

		sealType = dataLayerTi.getSealType(sealTypeId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getImportPk(), sealType.getImportPk());
		Assert.assertEquals(copy.getName(), sealType.getName());
		// tests for coverage completeness
		Assert.assertFalse(sealType.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(sealType.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}
	/**
	 * Hibernate test case for table: ti.standard_bearing_spacer.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testStandardBearingSpacer() throws CloneNotSupportedException {

	 	DataLayerTi dataLayerTi = DataLayerTiImpl.getInstance();
		StandardBearingSpacer standardBearingSpacer = TiDataPoolFactory.getStandardBearingSpacer();
		// Cascading on this property was switched off from config (or requires hbn bug workaround). Performing manual cascade.
		com.turbointernational.metadata.yourProjectName.factories.ti.HibernateTiDaoFactory.getBearingSpacerDao().saveOrUpdate(((com.turbointernational.metadata.yourProjectName.model.obj.ti.StandardBearingSpacerPK)standardBearingSpacer.getId()).getOversizedPart());
		// Cascading on this property was switched off from config (or requires hbn bug workaround). Performing manual cascade.
		com.turbointernational.metadata.yourProjectName.factories.ti.HibernateTiDaoFactory.getBearingSpacerDao().saveOrUpdate(((com.turbointernational.metadata.yourProjectName.model.obj.ti.StandardBearingSpacerPK)standardBearingSpacer.getId()).getStandardPart());
		dataLayerTi.saveOrUpdate(standardBearingSpacer);

		StandardBearingSpacerPK standardBearingSpacerId = standardBearingSpacer.getId();
		StandardBearingSpacer copy = standardBearingSpacer.clone();
		dataLayerTi.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerTi.evict(standardBearingSpacer); 		 

		standardBearingSpacer = dataLayerTi.getStandardBearingSpacer(standardBearingSpacerId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getId(), standardBearingSpacer.getId());
		// tests for coverage completeness
		Assert.assertFalse(standardBearingSpacer.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(standardBearingSpacer.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}
	/**
	 * Hibernate test case for table: ti.standard_journal_bearing.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testStandardJournalBearing() throws CloneNotSupportedException {

	 	DataLayerTi dataLayerTi = DataLayerTiImpl.getInstance();
		StandardJournalBearing standardJournalBearing = TiDataPoolFactory.getStandardJournalBearing();
		// Cascading on this property was switched off from config (or requires hbn bug workaround). Performing manual cascade.
		com.turbointernational.metadata.yourProjectName.factories.ti.HibernateTiDaoFactory.getJournalBearingDao().saveOrUpdate(((com.turbointernational.metadata.yourProjectName.model.obj.ti.StandardJournalBearingPK)standardJournalBearing.getId()).getOversizedPart());
		// Cascading on this property was switched off from config (or requires hbn bug workaround). Performing manual cascade.
		com.turbointernational.metadata.yourProjectName.factories.ti.HibernateTiDaoFactory.getJournalBearingDao().saveOrUpdate(((com.turbointernational.metadata.yourProjectName.model.obj.ti.StandardJournalBearingPK)standardJournalBearing.getId()).getStandardPart());
		dataLayerTi.saveOrUpdate(standardJournalBearing);

		StandardJournalBearingPK standardJournalBearingId = standardJournalBearing.getId();
		StandardJournalBearing copy = standardJournalBearing.clone();
		dataLayerTi.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerTi.evict(standardJournalBearing); 		 

		standardJournalBearing = dataLayerTi.getStandardJournalBearing(standardJournalBearingId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getId(), standardJournalBearing.getId());
		// tests for coverage completeness
		Assert.assertFalse(standardJournalBearing.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(standardJournalBearing.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}
	/**
	 * Hibernate test case for table: ti.turbine_wheel.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testTurbineWheel() throws CloneNotSupportedException {

	 	DataLayerTi dataLayerTi = DataLayerTiImpl.getInstance();
		TurbineWheel turbineWheel = TiDataPoolFactory.getTurbineWheel();
		dataLayerTi.saveOrUpdate(turbineWheel);

		Integer turbineWheelId = turbineWheel.getId();
		TurbineWheel copy = turbineWheel.clone();
		dataLayerTi.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerTi.evict(turbineWheel); 		 

		turbineWheel = dataLayerTi.getTurbineWheel(turbineWheelId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getDescription(), turbineWheel.getDescription());
		Assert.assertEquals(copy.getExduceOa(), turbineWheel.getExduceOa());
		Assert.assertEquals(copy.getImportPk(), turbineWheel.getImportPk());
		Assert.assertEquals(copy.getInactive(), turbineWheel.getInactive());
		Assert.assertEquals(copy.getInducerOc(), turbineWheel.getInducerOc());
		Assert.assertEquals(copy.getJournalOd(), turbineWheel.getJournalOd());
		Assert.assertEquals(copy.getManfr().getId(), turbineWheel.getManfr().getId());
		Assert.assertEquals(copy.getManfrPartNum(), turbineWheel.getManfrPartNum());
		Assert.assertEquals(copy.getName(), turbineWheel.getName());
		Assert.assertEquals(copy.getPartType().getId(), turbineWheel.getPartType().getId());
		Assert.assertEquals(copy.getShaftThreadF(), turbineWheel.getShaftThreadF());
		Assert.assertEquals(copy.getStemOe(), turbineWheel.getStemOe());
		Assert.assertEquals(copy.getTemp1Char(), turbineWheel.getTemp1Char());
		Assert.assertEquals(copy.getTemp1Dec(), turbineWheel.getTemp1Dec());
		Assert.assertEquals(copy.getTemp2Char(), turbineWheel.getTemp2Char());
		Assert.assertEquals(copy.getTemp2Dec(), turbineWheel.getTemp2Dec());
		Assert.assertEquals(copy.getTemp2Int(), turbineWheel.getTemp2Int());
		Assert.assertEquals(copy.getTemp3Char(), turbineWheel.getTemp3Char());
		Assert.assertEquals(copy.getTemp3Dec(), turbineWheel.getTemp3Dec());
		Assert.assertEquals(copy.getTemp3Int(), turbineWheel.getTemp3Int());
		Assert.assertEquals(copy.getTemp4Char(), turbineWheel.getTemp4Char());
		Assert.assertEquals(copy.getTemp4Dec(), turbineWheel.getTemp4Dec());
		Assert.assertEquals(copy.getTemp5Char(), turbineWheel.getTemp5Char());
		Assert.assertEquals(copy.getTemp5Dec(), turbineWheel.getTemp5Dec());
		Assert.assertEquals(copy.getTemp6Char(), turbineWheel.getTemp6Char());
		Assert.assertEquals(copy.getTemp6Dec(), turbineWheel.getTemp6Dec());
		Assert.assertEquals(copy.getTemp7Char(), turbineWheel.getTemp7Char());
		Assert.assertEquals(copy.getTemp8Char(), turbineWheel.getTemp8Char());
		Assert.assertEquals(copy.getTipHeightB(), turbineWheel.getTipHeightB());
		Assert.assertEquals(copy.getTrimNoBlades(), turbineWheel.getTrimNoBlades());
		// tests for coverage completeness
		Assert.assertFalse(turbineWheel.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(turbineWheel.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}
	/**
	 * Hibernate test case for table: ti.turbo.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testTurbo() throws CloneNotSupportedException {

	 	DataLayerTi dataLayerTi = DataLayerTiImpl.getInstance();
		Turbo turbo = TiDataPoolFactory.getTurbo();
		dataLayerTi.saveOrUpdate(turbo);

		Integer turboId = turbo.getId();
		Turbo copy = turbo.clone();
		dataLayerTi.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerTi.evict(turbo); 		 

		turbo = dataLayerTi.getTurbo(turboId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getDescription(), turbo.getDescription());
		Assert.assertEquals(copy.getImportPk(), turbo.getImportPk());
		Assert.assertEquals(copy.getInactive(), turbo.getInactive());
		Assert.assertEquals(copy.getManfr().getId(), turbo.getManfr().getId());
		Assert.assertEquals(copy.getManfrPartNum(), turbo.getManfrPartNum());
		Assert.assertEquals(copy.getName(), turbo.getName());
		Assert.assertEquals(copy.getPartType().getId(), turbo.getPartType().getId());
		Assert.assertEquals(copy.getTemp1Char(), turbo.getTemp1Char());
		Assert.assertEquals(copy.getTemp1Dec(), turbo.getTemp1Dec());
		Assert.assertEquals(copy.getTemp2Char(), turbo.getTemp2Char());
		Assert.assertEquals(copy.getTemp2Dec(), turbo.getTemp2Dec());
		Assert.assertEquals(copy.getTemp2Int(), turbo.getTemp2Int());
		Assert.assertEquals(copy.getTemp3Char(), turbo.getTemp3Char());
		Assert.assertEquals(copy.getTemp3Dec(), turbo.getTemp3Dec());
		Assert.assertEquals(copy.getTemp3Int(), turbo.getTemp3Int());
		Assert.assertEquals(copy.getTemp4Char(), turbo.getTemp4Char());
		Assert.assertEquals(copy.getTemp4Dec(), turbo.getTemp4Dec());
		Assert.assertEquals(copy.getTemp5Char(), turbo.getTemp5Char());
		Assert.assertEquals(copy.getTemp5Dec(), turbo.getTemp5Dec());
		Assert.assertEquals(copy.getTemp6Char(), turbo.getTemp6Char());
		Assert.assertEquals(copy.getTemp6Dec(), turbo.getTemp6Dec());
		Assert.assertEquals(copy.getTemp7Char(), turbo.getTemp7Char());
		Assert.assertEquals(copy.getTemp8Char(), turbo.getTemp8Char());
		Assert.assertEquals(copy.getTurboModel().getId(), turbo.getTurboModel().getId());
		// tests for coverage completeness
		Assert.assertFalse(turbo.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(turbo.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}
	/**
	 * Hibernate test case for table: ti.turbo_model.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testTurboModel() throws CloneNotSupportedException {

	 	DataLayerTi dataLayerTi = DataLayerTiImpl.getInstance();
		TurboModel turboModel = TiDataPoolFactory.getTurboModel();
		dataLayerTi.saveOrUpdate(turboModel);

		Integer turboModelId = turboModel.getId();
		TurboModel copy = turboModel.clone();
		dataLayerTi.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerTi.evict(turboModel); 		 

		turboModel = dataLayerTi.getTurboModel(turboModelId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getImportPk(), turboModel.getImportPk());
		Assert.assertEquals(copy.getName(), turboModel.getName());
		// tests for coverage completeness
		Assert.assertFalse(turboModel.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(turboModel.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}
	/**
	 * Hibernate test case for table: ti.turbo_type.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testTurboType() throws CloneNotSupportedException {

	 	DataLayerTi dataLayerTi = DataLayerTiImpl.getInstance();
		TurboType turboType = TiDataPoolFactory.getTurboType();
		dataLayerTi.saveOrUpdate(turboType);

		Integer turboTypeId = turboType.getId();
		TurboType copy = turboType.clone();
		dataLayerTi.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerTi.evict(turboType); 		 

		turboType = dataLayerTi.getTurboType(turboTypeId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getImportPk(), turboType.getImportPk());
		Assert.assertEquals(copy.getManfr().getId(), turboType.getManfr().getId());
		Assert.assertEquals(copy.getName(), turboType.getName());
		// tests for coverage completeness
		Assert.assertFalse(turboType.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(turboType.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}

	/**
	 * Clears the database.
	 */
	@Test
	@Transactional
	public void testPostCleanDBFirstPass() {
		// We'll ignore any exceptions in this pass to give time for the custom exec to execute too 
		// (+ clear out any DB loops)
	
		try{HibernateTiDaoFactory.getStandardJournalBearingDao().getQuery("delete from StandardJournalBearing").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateTiDaoFactory.getStandardBearingSpacerDao().getQuery("delete from StandardBearingSpacer").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateTiDaoFactory.getPartTurboTypeDao().getQuery("delete from PartTurboType").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateTiDaoFactory.getNozzleRingDao().getQuery("delete from NozzleRing").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateTiDaoFactory.getKitDao().getQuery("delete from Kit").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateTiDaoFactory.getJournalBearingDao().getQuery("delete from JournalBearing").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateTiDaoFactory.getInterchangeItemDao().getQuery("delete from InterchangeItem").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateTiDaoFactory.getHeatshieldDao().getQuery("delete from Heatshield").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateTiDaoFactory.getGasketDao().getQuery("delete from Gasket").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateTiDaoFactory.getCompressorWheelDao().getQuery("delete from CompressorWheel").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateTiDaoFactory.getCartridgeDao().getQuery("delete from Cartridge").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateTiDaoFactory.getBomAltItemDao().getQuery("delete from BomAltItem").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateTiDaoFactory.getBomDao().getQuery("delete from Bom").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateTiDaoFactory.getBearingSpacerDao().getQuery("delete from BearingSpacer").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateTiDaoFactory.getBearingHousingDao().getQuery("delete from BearingHousing").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateTiDaoFactory.getBackplateDao().getQuery("delete from Backplate").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateTiDaoFactory.getTurboTypeDao().getQuery("delete from TurboType").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateTiDaoFactory.getTurboDao().getQuery("delete from Turbo").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateTiDaoFactory.getTurbineWheelDao().getQuery("delete from TurbineWheel").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateTiDaoFactory.getPistonRingDao().getQuery("delete from PistonRing").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateTiDaoFactory.getPartDao().getQuery("delete from Part").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateTiDaoFactory.getManfrDao().getQuery("delete from Manfr").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateTiDaoFactory.getBomHierarchyDao().getQuery("delete from BomHierarchy").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateTiDaoFactory.getTurboModelDao().getQuery("delete from TurboModel").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateTiDaoFactory.getSealTypeDao().getQuery("delete from SealType").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateTiDaoFactory.getPartTypeDao().getQuery("delete from PartType").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateTiDaoFactory.getPartAttributeDao().getQuery("delete from PartAttribute").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateTiDaoFactory.getManfrTypeDao().getQuery("delete from ManfrType").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateTiDaoFactory.getKitTypeDao().getQuery("delete from KitType").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateTiDaoFactory.getInterchangeHeaderDao().getQuery("delete from InterchangeHeader").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateTiDaoFactory.getIInterchangeLogDao().getQuery("delete from IInterchangeLog").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateTiDaoFactory.getGasketTypeDao().getQuery("delete from GasketType").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateTiDaoFactory.getCoolTypeDao().getQuery("delete from CoolType").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateTiDaoFactory.getBomAltHeaderDao().getQuery("delete from BomAltHeader").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateTiDaoFactory.getAttributeTypeDao().getQuery("delete from AttributeType").executeUpdate(); } catch (Exception e) { /* do nothing */ }


		
	}

	/**
	 * Clears the database.
	 */
	@Test
	@Transactional
	public void postCleanDBFinalPass() {
	
		HibernateTiDaoFactory.getStandardJournalBearingDao().getQuery("delete from StandardJournalBearing").executeUpdate();
		HibernateTiDaoFactory.getStandardBearingSpacerDao().getQuery("delete from StandardBearingSpacer").executeUpdate();
		HibernateTiDaoFactory.getPartTurboTypeDao().getQuery("delete from PartTurboType").executeUpdate();
		HibernateTiDaoFactory.getNozzleRingDao().getQuery("delete from NozzleRing").executeUpdate();
		HibernateTiDaoFactory.getKitDao().getQuery("delete from Kit").executeUpdate();
		HibernateTiDaoFactory.getJournalBearingDao().getQuery("delete from JournalBearing").executeUpdate();
		HibernateTiDaoFactory.getInterchangeItemDao().getQuery("delete from InterchangeItem").executeUpdate();
		HibernateTiDaoFactory.getHeatshieldDao().getQuery("delete from Heatshield").executeUpdate();
		HibernateTiDaoFactory.getGasketDao().getQuery("delete from Gasket").executeUpdate();
		HibernateTiDaoFactory.getCompressorWheelDao().getQuery("delete from CompressorWheel").executeUpdate();
		HibernateTiDaoFactory.getCartridgeDao().getQuery("delete from Cartridge").executeUpdate();
		HibernateTiDaoFactory.getBomAltItemDao().getQuery("delete from BomAltItem").executeUpdate();
		HibernateTiDaoFactory.getBomDao().getQuery("delete from Bom").executeUpdate();
		HibernateTiDaoFactory.getBearingSpacerDao().getQuery("delete from BearingSpacer").executeUpdate();
		HibernateTiDaoFactory.getBearingHousingDao().getQuery("delete from BearingHousing").executeUpdate();
		HibernateTiDaoFactory.getBackplateDao().getQuery("delete from Backplate").executeUpdate();
		HibernateTiDaoFactory.getTurboTypeDao().getQuery("delete from TurboType").executeUpdate();
		HibernateTiDaoFactory.getTurboDao().getQuery("delete from Turbo").executeUpdate();
		HibernateTiDaoFactory.getTurbineWheelDao().getQuery("delete from TurbineWheel").executeUpdate();
		HibernateTiDaoFactory.getPistonRingDao().getQuery("delete from PistonRing").executeUpdate();
		HibernateTiDaoFactory.getPartDao().getQuery("delete from Part").executeUpdate();
		HibernateTiDaoFactory.getManfrDao().getQuery("delete from Manfr").executeUpdate();
		HibernateTiDaoFactory.getBomHierarchyDao().getQuery("delete from BomHierarchy").executeUpdate();
		HibernateTiDaoFactory.getTurboModelDao().getQuery("delete from TurboModel").executeUpdate();
		HibernateTiDaoFactory.getSealTypeDao().getQuery("delete from SealType").executeUpdate();
		HibernateTiDaoFactory.getPartTypeDao().getQuery("delete from PartType").executeUpdate();
		HibernateTiDaoFactory.getPartAttributeDao().getQuery("delete from PartAttribute").executeUpdate();
		HibernateTiDaoFactory.getManfrTypeDao().getQuery("delete from ManfrType").executeUpdate();
		HibernateTiDaoFactory.getKitTypeDao().getQuery("delete from KitType").executeUpdate();
		HibernateTiDaoFactory.getInterchangeHeaderDao().getQuery("delete from InterchangeHeader").executeUpdate();
		HibernateTiDaoFactory.getIInterchangeLogDao().getQuery("delete from IInterchangeLog").executeUpdate();
		HibernateTiDaoFactory.getGasketTypeDao().getQuery("delete from GasketType").executeUpdate();
		HibernateTiDaoFactory.getCoolTypeDao().getQuery("delete from CoolType").executeUpdate();
		HibernateTiDaoFactory.getBomAltHeaderDao().getQuery("delete from BomAltHeader").executeUpdate();
		HibernateTiDaoFactory.getAttributeTypeDao().getQuery("delete from AttributeType").executeUpdate();


		
	}

}

