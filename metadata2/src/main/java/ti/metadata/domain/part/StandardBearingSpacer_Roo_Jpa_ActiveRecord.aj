// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ti.metadata.domain.part;

import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import org.springframework.transaction.annotation.Transactional;
import ti.metadata.domain.part.StandardBearingSpacer;
import ti.metadata.domain.part.StandardBearingSpacerPK;

privileged aspect StandardBearingSpacer_Roo_Jpa_ActiveRecord {
    
    @PersistenceContext
    transient EntityManager StandardBearingSpacer.entityManager;
    
    public static final EntityManager StandardBearingSpacer.entityManager() {
        EntityManager em = new StandardBearingSpacer().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long StandardBearingSpacer.countStandardBearingSpacers() {
        return entityManager().createQuery("SELECT COUNT(o) FROM StandardBearingSpacer o", Long.class).getSingleResult();
    }
    
    public static List<StandardBearingSpacer> StandardBearingSpacer.findAllStandardBearingSpacers() {
        return entityManager().createQuery("SELECT o FROM StandardBearingSpacer o", StandardBearingSpacer.class).getResultList();
    }
    
    public static StandardBearingSpacer StandardBearingSpacer.findStandardBearingSpacer(StandardBearingSpacerPK id) {
        if (id == null) return null;
        return entityManager().find(StandardBearingSpacer.class, id);
    }
    
    public static List<StandardBearingSpacer> StandardBearingSpacer.findStandardBearingSpacerEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM StandardBearingSpacer o", StandardBearingSpacer.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    @Transactional
    public void StandardBearingSpacer.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void StandardBearingSpacer.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            StandardBearingSpacer attached = StandardBearingSpacer.findStandardBearingSpacer(this.id);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void StandardBearingSpacer.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void StandardBearingSpacer.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public StandardBearingSpacer StandardBearingSpacer.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        StandardBearingSpacer merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
}
