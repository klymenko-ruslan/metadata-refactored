// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ti.metadata.domain.part;

import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import org.springframework.transaction.annotation.Transactional;
import ti.metadata.domain.part.Kit;

privileged aspect Kit_Roo_Jpa_ActiveRecord {
    
    @PersistenceContext
    transient EntityManager Kit.entityManager;
    
    public static final EntityManager Kit.entityManager() {
        EntityManager em = new Kit().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long Kit.countKits() {
        return entityManager().createQuery("SELECT COUNT(o) FROM Kit o", Long.class).getSingleResult();
    }
    
    public static List<Kit> Kit.findAllKits() {
        return entityManager().createQuery("SELECT o FROM Kit o", Kit.class).getResultList();
    }
    
    public static Kit Kit.findKit(Long partId) {
        if (partId == null) return null;
        return entityManager().find(Kit.class, partId);
    }
    
    public static List<Kit> Kit.findKitEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM Kit o", Kit.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    @Transactional
    public void Kit.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void Kit.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            Kit attached = Kit.findKit(this.partId);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void Kit.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void Kit.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public Kit Kit.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        Kit merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
}
