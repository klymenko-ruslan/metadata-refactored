// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.turbointernational.metadata.domain.part;

import com.turbointernational.metadata.domain.part.BearingSpacer;
import com.turbointernational.metadata.domain.part.BearingSpacerController;
import java.util.List;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

privileged aspect BearingSpacerController_Roo_Controller_Json {
    
    @RequestMapping(value = "/{id}", method = RequestMethod.GET, headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> BearingSpacerController.showJson(@PathVariable("id") Long id) {
        BearingSpacer bearingSpacer = BearingSpacer.findBearingSpacer(id);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        if (bearingSpacer == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(bearingSpacer.toJson(), headers, HttpStatus.OK);
    }
    
    @RequestMapping(headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> BearingSpacerController.listJson() {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        List<BearingSpacer> result = BearingSpacer.findAllBearingSpacers();
        return new ResponseEntity<String>(BearingSpacer.toJsonArray(result), headers, HttpStatus.OK);
    }
    
    @RequestMapping(method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> BearingSpacerController.createFromJson(@RequestBody String json) {
        BearingSpacer bearingSpacer = BearingSpacer.fromJsonToBearingSpacer(json);
        bearingSpacer.persist();
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(value = "/jsonArray", method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> BearingSpacerController.createFromJsonArray(@RequestBody String json) {
        for (BearingSpacer bearingSpacer: BearingSpacer.fromJsonArrayToBearingSpacers(json)) {
            bearingSpacer.persist();
        }
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.PUT, headers = "Accept=application/json")
    public ResponseEntity<String> BearingSpacerController.updateFromJson(@RequestBody String json, @PathVariable("id") Long id) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        BearingSpacer bearingSpacer = BearingSpacer.fromJsonToBearingSpacer(json);
        if (bearingSpacer.merge() == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, headers = "Accept=application/json")
    public ResponseEntity<String> BearingSpacerController.deleteFromJson(@PathVariable("id") Long id) {
        BearingSpacer bearingSpacer = BearingSpacer.findBearingSpacer(id);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        if (bearingSpacer == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        bearingSpacer.remove();
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
}
